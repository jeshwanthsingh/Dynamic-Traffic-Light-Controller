

/**************************************************************
* Class::  CSC-415-0# Spring 2024
* Name:: <Your Name>
* Student IDs:: <Your ID>
* GitHub-Name:: <Your GitHub Username>
* Group-Name:: <Your Group Name>
* Project:: Basic File System
*
* Description:: This program defines the Volume Control Block (VCB),
*               Directory Entry structure, and implements bitmap-based 
*               free space management. It demonstrates basic operations 
*               such as initialization and printing of metadata.
**************************************************************/

#include <stdio.h>    // For standard input/output functions
#include <stdint.h>   // For fixed-width integer types
#include <time.h>     // For time-related functions

// ---- Volume Control Block (VCB) ----
#define MAX_VOLUME_NAME 32  // Maximum length for volume name

typedef struct volumeControlBlock {
    char volumeName[MAX_VOLUME_NAME];  // Name of the volume
    uint32_t totalBlocks;              // Total number of blocks in the volume
    uint32_t blockSize;                // Size of each block in bytes
    uint32_t freeBlocks;               // Number of free blocks available
    uint32_t rootDirectory;            // Block where the root directory starts
    long signature;                    // Signature for identification
} volumeControlBlock;

// ---- Directory Entry Structure ----
#define NAMESIZELIMIT 20  // Maximum length for file/directory names

typedef struct directoryEntry {
    char name[NAMESIZELIMIT];  // Name of the directory or file
    int size;                  // Size of the entry in bytes
    int location;              // Location of the entry on disk (block number)
    int isFile;                // 0 = directory, 1 = file
    time_t timeCreated;        // Time when the entry was created
} directoryEntry;

// ---- Bitmap for Free Space Management ----
#define BLOCK_COUNT 100  // Total number of blocks in the volume
unsigned char bitmap[BLOCK_COUNT / 8] = {0};  // Bitmap with 100 bits (12.5 bytes)

// Function to mark a block as used (set bit to 1)
void setBit(int blockIndex) {
    bitmap[blockIndex / 8] |= (1 << (blockIndex % 8));
}

// Function to mark a block as free (set bit to 0)
void clearBit(int blockIndex) {
    bitmap[blockIndex / 8] &= ~(1 << (blockIndex % 8));
}

// Function to check if a block is used (returns 1 if used, 0 if free)
int isBlockUsed(int blockIndex) {
    return (bitmap[blockIndex / 8] & (1 << (blockIndex % 8))) != 0;
}

int main() {
    // Initialize a VCB (Volume Control Block)
    volumeControlBlock vcb = {
        .volumeName = "MyVolume",
        .totalBlocks = BLOCK_COUNT,
        .blockSize = 512,
        .freeBlocks = BLOCK_COUNT,
        .rootDirectory = 0,
        .signature = 0x12345678  // Example signature
    };

    // Print VCB information
    printf("Volume Control Block (VCB):\n");
    printf("Volume Name: %s\n", vcb.volumeName);
    printf("Total Blocks: %u\n", vcb.totalBlocks);
    printf("Block Size: %u bytes\n", vcb.blockSize);
    printf("Free Blocks: %u\n", vcb.freeBlocks);
    printf("Root Directory Block: %u\n", vcb.rootDirectory);
    printf("Signature: %lx\n\n", vcb.signature);

    // Initialize a directory entry for the root directory
    directoryEntry root = {
        .name = "root",
        .size = 0,
        .location = 0,
        .isFile = 0,  // 0 indicates it's a directory
        .timeCreated = time(NULL)  // Current time as creation time
    };

    // Print Directory Entry information
    printf("Directory Entry:\n");
    printf("Name: %s\n", root.name);
    printf("Size: %d bytes\n", root.size);
    printf("Location: Block %d\n", root.location);
    printf("Type: %s\n", root.isFile ? "File" : "Directory");
    printf("Created: %s\n", ctime(&root.timeCreated));  // Print creation time

    // Demonstrate free space management with bitmap
    printf("\nAllocating block 5...\n");
    setBit(5);  // Mark block 5 as used
    printf("Block 5 used? %d\n", isBlockUsed(5));  // Should print 1 (used)

    printf("Freeing block 5...\n");
    clearBit(5);  // Mark block 5 as free
    printf("Block 5 used? %d\n", isBlockUsed(5));  // Should print 0 (free)

    return 0;
}

