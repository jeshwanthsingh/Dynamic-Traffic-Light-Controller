/**************************************************************
* Class::  CSC-415-01 Fall 2024
* Name:: [Your Name]
* Student ID:: [Your Student ID]
* GitHub-Name:: [Your GitHub Username]
* Project:: Assignment 5 â€“ Buffered I/O read
*
* File:: b_io.c
*
* Description:: This file implements the functions to open, read, 
*               and close files using buffered I/O in chunks of 
*               B_CHUNK_SIZE. 
*
**************************************************************/

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include "b_io.h"
#include "fsLowSmall.h"

#define MAXFCBS 20          // The maximum number of files open at one time
#define B_CHUNK_SIZE 512     // Size of buffer for file reads

// This structure is all the information needed to maintain an open file
typedef struct b_fcb
{
    fileInfo *fi;        // Holds low-level system's file info
    char *buffer;        // Buffer for reading file data
    int buf_index;       // Position in the buffer
    int buf_remain;      // Remaining bytes in the buffer
    int block_count;     // Number of blocks read from the file
    int file_index;      // Current byte index in the file
} b_fcb;

// Static array of file control blocks
b_fcb fcbArray[MAXFCBS];

// Indicates that the file control block array has not been initialized
int startup = 0;	

// Method to initialize the file system / file control blocks
void b_init()
{
    if (startup) 
        return;  // Already initialized

    // Initialize fcbArray to mark all FCBs as free
    for (int i = 0; i < MAXFCBS; i++)
    {
        fcbArray[i].fi = NULL; // Indicates a free FCB
    }
    
    startup = 1;
}

// Method to get a free File Control Block (FCB) element
b_io_fd b_getFCB()
{
    for (int i = 0; i < MAXFCBS; i++)
    {
        if (fcbArray[i].fi == NULL)  // Free FCB found
        {
            fcbArray[i].fi = (fileInfo *)-2; // Mark as in use
            return i;  // Return the free FCB index
        }
    }
    return -1;  // All FCBs in use
}

// Function to open a file
b_io_fd b_open(char *filename, int flags)
{
    if (startup == 0) 
        b_init();  // Initialize system if needed

    // Get file info using GetFileInfo
    fileInfo *info = GetFileInfo(filename);
    if (info == NULL)
    {
        // File not found
        return -1;
    }

    // Get a free FCB
    b_io_fd fd = b_getFCB();
    if (fd == -1)
    {
        // No free FCB available
        return -1;
    }

    // Allocate buffer for reading (512 bytes per chunk)
    char *buffer = malloc(B_CHUNK_SIZE);
    if (buffer == NULL)
    {
        // Memory allocation failed
        return -1;
    }

    // Initialize FCB with file info and buffer
    fcbArray[fd].fi = info;
    fcbArray[fd].buffer = buffer;
    fcbArray[fd].buf_index = 0;
    fcbArray[fd].buf_remain = 0;
    fcbArray[fd].block_count = 0;
    fcbArray[fd].file_index = 0;

    // Return file descriptor
    return fd;
}

// Function to read data from the file
int b_read(b_io_fd fd, char *buffer, int count)
{
    if (startup == 0) 
        b_init();  // Ensure system initialization

    // Validate file descriptor
    if (fd < 0 || fd >= MAXFCBS || fcbArray[fd].fi == NULL)
    {
        return -1;  // Invalid file descriptor
    }

    b_fcb *fcb = &fcbArray[fd];  // Get the FCB for the file
    int bytes_read = 0;          // Track the number of bytes read

    // Ensure we don't read beyond the file size
    if (fcb->file_index + count > fcb->fi->fileSize)
    {
        count = fcb->fi->fileSize - fcb->file_index;
    }

    // While there are bytes left to read
    while (count > 0)
    {
        // If buffer is empty, read new data from the file
        if (fcb->buf_remain == 0)
        {
            int blocks_read = LBAread(fcb->buffer, 1, fcb->fi->location + fcb->block_count);
            if (blocks_read == 0)
            {
                // End of file reached
                return bytes_read;
            }
            fcb->block_count++;
            fcb->buf_index = 0;
            fcb->buf_remain = B_CHUNK_SIZE;
        }

        // Copy data from buffer to user's buffer
        int bytes_to_copy = (count < fcb->buf_remain) ? count : fcb->buf_remain;
        memcpy(buffer + bytes_read, fcb->buffer + fcb->buf_index, bytes_to_copy);

        // Update pointers and counters
        bytes_read += bytes_to_copy;
        fcb->buf_index += bytes_to_copy;
        fcb->buf_remain -= bytes_to_copy;
        count -= bytes_to_copy;
    }

    // Update file position
    fcb->file_index += bytes_read;
    return bytes_read;
}

// Function to close the file and release resources
int b_close(b_io_fd fd)
{
    // Validate file descriptor
    if (fd < 0 || fd >= MAXFCBS || fcbArray[fd].fi == NULL)
    {
        return -1;  // Invalid file descriptor
    }

    // Free the buffer
    free(fcbArray[fd].buffer);
    fcbArray[fd].buffer = NULL;

    // Mark FCB as free
    fcbArray[fd].fi = NULL;

    return 0;  // Success
}



